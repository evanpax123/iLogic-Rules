Public Sub Main() 
'---start of iLogic rule---
'Declare Variables
Dim oDrawDoc As DrawingDocument
Dim sFilename As String
Dim RevNum As String
Dim oPartsList1 As PartsList
Dim oPartsListTemp As PartsList
Dim oPlacementPoint As Point2d
Dim billnum As String
Dim oCol As PartsListColumn
Dim colHeader As String
Dim colCount As Integer
Dim qtyStr As String
Dim qtyFt As Double
Dim oNextRow As PartsListRow
Dim oCurrentRow As PartsListRow
Dim oLastRow As PartsListRow
Dim oMasQTYCell As PartsListCell
Dim oLastQTYCell As PartsListCell
Dim oNextQTYCell As PartsListCell
Dim oMas90Cell As PartsListCell
Dim oLastMas90Cell As PartsListCell
Dim oItemCell As PartsListCell
Dim oNextItemCell As PartsListCell
Dim ItemNumDot As String
Dim multiplier As Double
Dim i As Integer
Dim j As Integer
Dim dotnum As Integer
Dim rowCount As Integer
Dim StartTime As Double
Dim SecondsElapsed As Double
Dim plateNumbers As String()


oDrawDoc = ThisApplication.ActiveDocument
RevNum = iProperties.Value("Project", "Revision Number").ToString


'Get bill number
billnum = InputBox("Enter Bill Number:", "Export Sage BOM", "ex BU/F/2120 , 1487/B40")
If billnum.Length = 0
        Exit Sub
End If


'Remember time when macro starts
 StartTime = Timer


'Create Temporary Parts List
oPlacementPoint = ThisApplication.TransientGeometry.CreatePoint2d(0, 0)
oPartsListTemp = oDrawDoc.ActiveSheet.PartsLists.Add(oDrawDoc.ActiveSheet.DrawingViews(1), oPlacementPoint)
oPartsListTemp.Sort("ITEM")


'Iterate through columns And Remove (Makes code 20% faster)
colCount = oPartsListTemp.PartsListColumns.Count
For i = colCount To 1 Step -1
        oCol = oPartsListTemp.PartsListColumns(i)
        colHeader = oCol.Title.ToString
        If (colHeader <> "Mas 90 #") And (colHeader <> "ITEM QTY") And (colHeader <> "ITEM") And (colHeader <> "PTI Description")
                oCol.Remove
        End If
Next


'Create Custom Property - Bill Number
oCustomPropertySet = ThisDoc.Document.PropertySets.Item("Inventor User Defined Properties")
Try
oCustomPropertySet.Item("BILLNUM").Delete
oCustomPropertySet.Add("", "BILLNUM", 200)
Catch
oCustomPropertySet.Add("", "BILLNUM", 200)
End Try


'Create Custom Property - Mas90 Item QTY
Try
oCustomPropertySet.Item("MAS90 ITEM QTY").Delete
oCustomPropertySet.Add("", "MAS90 ITEM QTY", 199)
Catch
oCustomPropertySet.Add("", "MAS90 ITEM QTY", 199)
End Try


'Add and Fill BILLNUM Column
oPartsListTemp.PartsListColumns.Add(kCustomProperty, 200, "Bill Number")
colCount = oPartsListTemp.PartsListColumns.Count
rowCount = oPartsListTemp.PartsListRows.Count
For i = 1 To rowCount
        oPartsListTemp.PartsListRows(i).Item(colCount).Value = billnum
Next


oPartsListTemp.PartsListColumns.Add(kVolumePartsListProperty)


'Modify item numbers
'sort by mas 90, iterate
plateNumbers = {"Apple", "Banana", "Orange"}
MsgBox(plateNumbers(0) & plateNumbers(1)& plateNumbers(2))
oPartsListTemp.Sort("Mas 90 #")
oPartsListTemp.PartsListColumns.Add(kCustomProperty, 199, "MAS90 ITEM QTY")
oPartsListTemp.PartsListColumns.Add(kQuantityPartsListProperty)
colCount = oPartsListTemp.PartsListColumns.Count
rowCount = oPartsListTemp.PartsListRows.Count
For i = 1 To rowCount
        oCurrentRow = oPartsListTemp.PartsListRows(i)
        oMasQTYCell = oCurrentRow.Item("MAS90 ITEM QTY")
        qtyStr = oCurrentRow.Item("QTY").Value
        'Check Units, Convert to Feet
        If InStr(qtyStr, " in")
                qtyStr = Left(qtyStr, (qtyStr.Length - 3))
                qtyFt = CDbl(qtyStr)
                qtyFt = Round((qtyFt / 12.00), 2)
                oMasQTYCell.Value = qtyFt
        Else
                oMasQTYCell.Value = oCurrentRow.Item("QTY").Value
        End If
        'Convert Plate QTY to Area
        'Sum Duplicate Pnumbers
    If i <> 1
                oLastRow = oPartsListTemp.PartsListRows(i-1)
                oMas90Cell = oCurrentRow.Item("Mas 90 #")
                oLastMas90Cell = oLastRow.Item("Mas 90 #")
                If (oMas90Cell.Value <> "") And (oMas90Cell.Value = oLastMas90Cell.Value)
                        oLastQTYCell = oLastRow.Item("MAS90 ITEM QTY")
                        oMasQTYCell.Value = Round((CDbl(oMasQTYCell.Value) + CDbl(oLastQTYCell.Value)), 2)
                        oLastQTYCell.Value = 0
                        oPartsListTemp.PartsListRows(i-1).Visible = False
                End If
    End If
Next 


'Convert Structured To parts only quantities (uses interation instead of recursion)
For i = 1 To rowCount
        oCurrentRow = oPartsListTemp.PartsListRows(i)
        If i <> rowCount
                oNextRow = oPartsListTemp.PartsListRows(i + 1)
            oItemCell = oCurrentRow.Item("ITEM")
                oNextItemCell = oNextRow.Item("ITEM")
                ItemNumDot = oItemCell.Value + "."
                If ItemNumDot = Left(oNextItemCell.Value, ItemNumDot.Length)
                        'we know has branches. need to scan entire list for first sub-branches and apply multiplier
                        multiplier = CDbl(oCurrentRow.Item("MAS90 ITEM QTY").Value)
                        dotnum = (Len(oItemCell.Value) -Len(Replace(oItemCell.Value, ".", ""))) 'number of dots in current row
                        dotnum = dotnum + 1 'will apply multiplier only one level down
                        j = 1
                        proceed = True
                        Do While proceed
                                oNextRow = oPartsListTemp.PartsListRows(i + j)
                                oNextItemCell = oNextRow.Item("ITEM")
                                oNextQTYCell = oNextRow.Item("MAS90 ITEM QTY")
                                If ItemNumDot = Left(oNextItemCell.Value, ItemNumDot.Length)
                                        'still a branch
                                        If dotnum = (Len(oNextItemCell.Value) -Len(Replace(oNextItemCell.Value, ".", ""))) 'number of dots in next row
                                                oNextQTYCell.Value = (multiplier * CDbl(oNextQTYCell.Value))
                                        End If
                                        j = j + 1
                                Else
                                        proceed = False
                                        multiplier = 0
                            End If
                        Loop
                        oCurrentRow.Item("MAS90 ITEM QTY").Value = 0
                End If
        End If
Next


'For Plate - hardcode thicknesses based on mas90 numbers
  'Divide volume By thickness To Get surface area - check units


MsgBox("Check")


'Iterate through columns and remove
colCount = oPartsListTemp.PartsListColumns.Count
For i = colCount To 1 Step -1
        oCol = oPartsListTemp.PartsListColumns(i)
        colHeader = oCol.Title.ToString
        If (colHeader <> "Mas 90 #") And (colHeader <> "MAS90 ITEM QTY") And (colHeader <> "Bill Number") And (colHeader <> "PTI Description")
                oCol.Remove
        End If
Next


'Get PDF target folder path And filename
sFilename = "C:\Users\epax\Desktop\" & ThisDoc.FileName(False) & " Rev" & RevNum & ".xls"
oPartsListTemp.Export(sFilename, PartsListFileFormatEnum.kMicrosoftExcel)
oPartsListTemp.Delete


'Determine how many seconds code took to run
  SecondsElapsed = Round(Timer - StartTime, 2)


'Notify user in seconds
  MsgBox("BOM Exported! (" & SecondsElapsed & " seconds)", vbInformation)
  
End Sub


'---Helper Functions---


Public Function IsInArray(stringToBeFound As String, arr() As String) As Boolean
    Dim q
    For q = LBound(arr) To UBound(arr)
        If arr(q) = stringToBeFound Then
            IsInArray = True
            Exit Function
        End If
    Next q
    IsInArray = False
End Function